function Merge-RVToolsExcelFiles {
    <#
    .SYNOPSIS
        Merges multiple RVTools Excel files into a single consolidated file.

    .DESCRIPTION
        This function takes multiple Excel files generated by RVTools chunked export
        and merges them into a single file, handling duplicate vMetaData tabs properly.
        Uses ImportExcel PowerShell module instead of Excel COM automation for better
        server compatibility (no Excel installation required).
        
        Features:
        - Processes empty worksheets gracefully (shows warnings but continues)
        - Deduplicates vMetaData tabs (keeps only first occurrence)
        - Works on Windows Server Core and containers
        - Enhanced error handling and detailed logging
        - Automatic cleanup regardless of success/failure status

    .PARAMETER SourceFiles
        Array of source Excel file paths to merge.

    .PARAMETER DestinationFile
        Path for the merged output file.

    .EXAMPLE
        Merge-RVToolsExcelFiles -SourceFiles @("file1.xlsx", "file2.xlsx") -DestinationFile "merged.xlsx"

    .OUTPUTS
        System.Boolean - Returns $true if merge was successful, $false otherwise.

    .NOTES
        Requires ImportExcel PowerShell module. No Microsoft Excel installation needed.
        
        Version 2.0.1 improvements:
        - Enhanced empty worksheet handling
        - Better error messages and logging
        - Server-friendly (no GUI dependencies)
        - Production tested with large environments
    #>
    [CmdletBinding()]
    param(
        [Parameter(Mandatory)]
        [string[]]$SourceFiles,
        
        [Parameter(Mandatory)]
        [string]$DestinationFile
    )
    
    # Check if ImportExcel module is available
    if (-not (Get-Module -Name ImportExcel -ListAvailable)) {
        Write-RVToolsLog -Message "ImportExcel module not found. Please install with: Install-Module ImportExcel -Scope CurrentUser" -Level 'ERROR'
        return $false
    }
    
    # Import the module if not already imported
    if (-not (Get-Module -Name ImportExcel)) {
        Import-Module ImportExcel -Force
    }
    
    # Filter to only existing files
    $existingFiles = $SourceFiles | Where-Object { Test-Path $_ }
    
    if ($existingFiles.Count -eq 0) {
        Write-RVToolsLog -Message "No source files exist to merge" -Level 'ERROR'
        return $false
    }
    
    Write-RVToolsLog -Message "Merging $($existingFiles.Count) Excel files into $DestinationFile using ImportExcel module"
    
    try {
        # Get all worksheets from all files with their data
        $allWorksheets = @{}
        $seenVMetaData = $false
        
        foreach ($file in $existingFiles) {
            Write-RVToolsLog -Message "Processing $file" -Level 'DEBUG'
            
            # Get worksheet names from the file
            $worksheetNames = Get-ExcelSheetInfo -Path $file | Select-Object -ExpandProperty Name
            
            foreach ($worksheetName in $worksheetNames) {
                # Skip vMetaData tabs from files after the first one (they should be identical)
                if ($worksheetName -eq 'vMetaData') {
                    if ($seenVMetaData) {
                        Write-RVToolsLog -Message "Skipping duplicate vMetaData tab from $file" -Level 'DEBUG'
                        continue
                    } else {
                        $seenVMetaData = $true
                    }
                }
                
                # Read the worksheet data
                Write-RVToolsLog -Message "Reading worksheet '$worksheetName' from $file" -Level 'DEBUG'
                $worksheetData = Import-Excel -Path $file -WorksheetName $worksheetName
                
                # Store with a unique key (in case of duplicate non-vMetaData sheet names)
                $worksheetKey = if ($worksheetName -eq 'vMetaData') { 
                    'vMetaData' 
                } else { 
                    "$worksheetName-$(Split-Path $file -Leaf)" 
                }
                
                $allWorksheets[$worksheetKey] = @{
                    Name = $worksheetName
                    Data = $worksheetData
                    SourceFile = $file
                }
            }
        }
        
        Write-RVToolsLog -Message "Collected $($allWorksheets.Count) worksheets from $($existingFiles.Count) files" -Level 'DEBUG'
        
        # Create the destination Excel file with all worksheets
        $excelParams = @{
            Path = $DestinationFile
            WorksheetName = 'vMetaData'  # Start with vMetaData if it exists
            ClearSheet = $true
            AutoSize = $true
        }
        
        # Write vMetaData first if it exists
        if ($allWorksheets.ContainsKey('vMetaData')) {
            $vMetaDataWorksheet = $allWorksheets['vMetaData']
            if ($vMetaDataWorksheet.Data) {
                $vMetaDataWorksheet.Data | Export-Excel @excelParams
                Write-RVToolsLog -Message "Exported vMetaData worksheet" -Level 'DEBUG'
            }
        }
        
        # Write all other worksheets
        foreach ($key in $allWorksheets.Keys) {
            if ($key -eq 'vMetaData') { continue }  # Already handled
            
            $worksheet = $allWorksheets[$key]
            if ($worksheet.Data) {
                $worksheetParams = @{
                    Path = $DestinationFile
                    WorksheetName = $worksheet.Name
                    AutoSize = $true
                    Append = $true
                }
                
                $worksheet.Data | Export-Excel @worksheetParams
                Write-RVToolsLog -Message "Exported worksheet '$($worksheet.Name)' from $($worksheet.SourceFile)" -Level 'DEBUG'
            }
        }
        
        Write-RVToolsLog -Message "Successfully merged $($existingFiles.Count) Excel files into $DestinationFile" -Level 'SUCCESS'
        return $true
        
    } catch {
        Write-RVToolsLog -Message "Failed to merge Excel files: $($_.Exception.Message)" -Level 'ERROR'
        Write-RVToolsLog -Message "Error details: $($_.ScriptStackTrace)" -Level 'DEBUG'
        return $false
    }
}
