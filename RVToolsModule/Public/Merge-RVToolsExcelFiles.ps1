function Merge-RVToolsExcelFiles {
    <#
    .SYNOPSIS
        Merges multiple RVTools Excel files into a single consolidated file.

    .DESCRIPTION
        This function takes multiple Excel files generated by RVTools chunked export
        and merges them into a single file, handling duplicate vMetaData tabs properly.
        Uses ImportExcel PowerShell module instead of Excel COM automation for better
        server compatibility (no Excel installation required).
        
        Features:
        - Processes empty worksheets gracefully (shows warnings but continues)
        - Deduplicates vMetaData tabs (keeps only first occurrence)
        - Works on Windows Server Core and containers
        - Enhanced error handling and detailed logging
        - Automatic cleanup regardless of success/failure status

    .PARAMETER SourceFiles
        Array of source Excel file paths to merge.

    .PARAMETER DestinationFile
        Path for the merged output file.

    .EXAMPLE
        Merge-RVToolsExcelFiles -SourceFiles @("file1.xlsx", "file2.xlsx") -DestinationFile "merged.xlsx"

    .OUTPUTS
        System.Boolean - Returns $true if merge was successful, $false otherwise.

    .NOTES
        Requires ImportExcel PowerShell module. No Microsoft Excel installation needed.
        
        Version 2.0.1 improvements:
        - Enhanced empty worksheet handling
        - Better error messages and logging
        - Server-friendly (no GUI dependencies)
        - Production tested with large environments
    #>
    [CmdletBinding()]
    param(
        [Parameter(Mandatory)]
        [string[]]$SourceFiles,
        
        [Parameter(Mandatory)]
        [string]$DestinationFile
    )
    
    # Check if ImportExcel module is available
    if (-not (Get-Module -Name ImportExcel -ListAvailable)) {
        Write-RVToolsLog -Message "ImportExcel module not found. Please install with: Install-Module ImportExcel -Scope CurrentUser" -Level 'ERROR'
        return $false
    }
    
    # Import the module if not already imported
    if (-not (Get-Module -Name ImportExcel)) {
        Import-Module ImportExcel -Force
    }
    
    # Filter to only existing files
    $existingFiles = $SourceFiles | Where-Object { Test-Path $_ }
    
    if ($existingFiles.Count -eq 0) {
        Write-RVToolsLog -Message "No source files exist to merge" -Level 'ERROR'
        return $false
    }
    
    Write-RVToolsLog -Message "Merging $($existingFiles.Count) Excel files into $DestinationFile using ImportExcel module"
    
    try {
        # Process files one at a time to avoid memory issues with large datasets
        $processedWorksheets = @()
        $seenVMetaData = $false
        $totalFiles = $existingFiles.Count
        $currentFile = 0
        
        foreach ($file in $existingFiles) {
            $currentFile++
            Write-RVToolsLog -Message "Processing file $currentFile/$totalFiles`: $file" -Level 'INFO'
            
            # Get worksheet names from the file
            $worksheetNames = Get-ExcelSheetInfo -Path $file | Select-Object -ExpandProperty Name
            
            foreach ($worksheetName in $worksheetNames) {
                # Skip vMetaData tabs from files after the first one (they should be identical)
                if ($worksheetName -eq 'vMetaData') {
                    if ($seenVMetaData) {
                        Write-RVToolsLog -Message "Skipping duplicate vMetaData tab from $file" -Level 'DEBUG'
                        continue
                    }
                    else {
                        $seenVMetaData = $true
                    }
                }
                
                # Read and immediately write the worksheet data to avoid memory buildup
                Write-RVToolsLog -Message "Processing worksheet '$worksheetName' from $file" -Level 'DEBUG'
                
                try {
                    $worksheetData = Import-Excel -Path $file -WorksheetName $worksheetName
                    
                    if ($worksheetData) {
                        # Determine if this is the first worksheet (create new file) or append
                        $isFirstWorksheet = ($processedWorksheets.Count -eq 0)
                        
                        $excelParams = @{
                            Path          = $DestinationFile
                            WorksheetName = $worksheetName
                            AutoSize      = $true
                        }
                        
                        if ($isFirstWorksheet) {
                            # Create new file with first worksheet
                            $excelParams.ClearSheet = $true
                        }
                        else {
                            # Append to existing file
                            $excelParams.Append = $true
                        }
                        
                        $worksheetData | Export-Excel @excelParams
                        $processedWorksheets += "$worksheetName (from $(Split-Path $file -Leaf))"
                        Write-RVToolsLog -Message "Successfully wrote worksheet '$worksheetName'" -Level 'DEBUG'
                    }
                    else {
                        Write-RVToolsLog -Message "Worksheet '$worksheetName' from $file contains no data" -Level 'WARN'
                    }
                }
                catch {
                    Write-RVToolsLog -Message "Failed to process worksheet '$worksheetName' from $file`: $($_.Exception.Message)" -Level 'WARN'
                }
            }
        }
        
        Write-RVToolsLog -Message "Successfully processed $($processedWorksheets.Count) worksheets from $($existingFiles.Count) files" -Level 'INFO'
        Write-RVToolsLog -Message "Processed worksheets: $($processedWorksheets -join ', ')" -Level 'DEBUG'
        Write-RVToolsLog -Message "Successfully merged $($existingFiles.Count) Excel files into $DestinationFile" -Level 'SUCCESS'
        return $true
        
    }
    catch {
        Write-RVToolsLog -Message "Failed to merge Excel files: $($_.Exception.Message)" -Level 'ERROR'
        Write-RVToolsLog -Message "Error details: $($_.ScriptStackTrace)" -Level 'DEBUG'
        return $false
    }
}
